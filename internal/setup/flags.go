package setup

import (
	"flag"
	"fmt"
	"io"
	"log"
	"os"
	"path/filepath"
	"strings"
)

type FlagValues struct {
	RemoveID    string
	UpdateID    string
	ViewID      string
	ViewAll     bool
	AddEntry    bool
	StartServer bool
	Backup      bool
	JSONOut     bool
	Import      string
	Firefox     bool
	Chromium    bool
	Dalennod    bool
	Where       bool
}

var flagValues FlagValues

func cliFlags() {
	flag.Usage = func() {
		var w io.Writer = flag.CommandLine.Output()
		fmt.Fprintln(w, "Usage of dalennod: dalennod [OPTION] ...")
		fmt.Fprintln(w, "\nOptions:")
		fmt.Fprintln(w, "  -s, --serve\t\tStart webserver locally for Web UI & Extension")
		fmt.Fprintln(w, "  -a, --add\t\tAdd a bookmark entry to the database")
		fmt.Fprintln(w, "  -r, --remove [id]\tRemove specific bookmark using its ID")
		fmt.Fprintln(w, "  -u, --update [id]\tUpdate specific bookmark using its ID")
		fmt.Fprintln(w, "  -v, --view [id]\tView specific bookmark using its ID")
		fmt.Fprintln(w, "  -V, --view-all\tView all bookmarks")
		fmt.Fprintln(w, "  -i, --import [file]\tImport bookmarks from a browser")
		fmt.Fprintln(w, "  --firefox\t\tImport bookmarks from Firefox \n\t\t\t  Must use alongside -i, --import option")
		fmt.Fprintln(w, "  --chromium\t\tImport bookmarks from Chromium \n\t\t\t  Must use alongside -i, --import option")
		fmt.Fprintln(w, "  --dalennod\t\tImport bookmarks from exported Dalennod JSON \n\t\t\t  Must use alongside -i, --import option")
		fmt.Fprintln(w, "  -b, --backup\t\tStart backup process")
		fmt.Fprintln(w, "  --json\t\tPrint entire DB in JSON \n\t\t\t  Use alongside -b, --backup flag")
		fmt.Fprintln(w, "  --where\t\tPrint config and logs directory path")
		fmt.Fprintln(w, "  -h, --help\t\tShows this message")
	}

	flag.BoolVar(&flagValues.StartServer, "s", false, "Start webserver locally for Web UI & Extension")
	flag.BoolVar(&flagValues.StartServer, "serve", false, "Start webserver locally for Web UI & Extension")

	flag.StringVar(&flagValues.RemoveID, "r", "", "Remove specific bookmark using its ID")
	flag.StringVar(&flagValues.RemoveID, "remove", "", "Remove specific bookmark using its ID")

	flag.StringVar(&flagValues.UpdateID, "u", "", "Update specific bookmark using its ID")
	flag.StringVar(&flagValues.UpdateID, "update", "", "Update specific bookmark using its ID")

	flag.StringVar(&flagValues.ViewID, "v", "", "View specific bookmark using its ID")
	flag.StringVar(&flagValues.ViewID, "view", "", "View specific bookmark using its ID")

	flag.BoolVar(&flagValues.ViewAll, "V", false, "View all bookmarks")
	flag.BoolVar(&flagValues.ViewAll, "view-all", false, "View all bookmarks")

	flag.BoolVar(&flagValues.AddEntry, "a", false, "Add a bookmark entry to the database")
	flag.BoolVar(&flagValues.AddEntry, "add", false, "Add a bookmark entry to the database")

	flag.BoolVar(&flagValues.Backup, "b", false, "Start backup process")
	flag.BoolVar(&flagValues.Backup, "backup", false, "Start backup process")
	flag.BoolVar(&flagValues.JSONOut, "json", false, "Print entire DB in JSON. Use alongside --backup flag")

	flag.StringVar(&flagValues.Import, "i", "", "Import bookmarks from a browser")
	flag.StringVar(&flagValues.Import, "import", "", "Import bookmarks from a browser")
	flag.BoolVar(&flagValues.Firefox, "firefox", false, "Import bookmarks from Firefox. Use alongside -i flag")
	flag.BoolVar(&flagValues.Chromium, "chromium", false, "Import bookmarks from Chromium. Use alongside -i flag")
	flag.BoolVar(&flagValues.Dalennod, "dalennod", false, "Import bookmarks exported Dalennod JSON. Use alongside -i flag")

	flag.BoolVar(&flagValues.Where, "where", false, "Print config and logs directory path")
}

func ParseFlags() FlagValues {
	cliFlags()
	flag.Parse()
	return flagValues
}

func setCompletion() {
	shell := os.Getenv("SHELL")
	if strings.Contains(shell, "fish") {
		fishCompletion()
	}
}

func fishCompletion() {
	homePath, err := os.UserHomeDir()
	if err != nil {
		log.Println("error finding home directory. ERROR:", err)
	}

	fishLocalPath := filepath.Join(homePath, ".local", "share", "fish", "generated_completions")
	fishLocalStat, err := os.Stat(fishLocalPath)
	if err != nil {
		log.Println("error getting fish shell local directory info. ERROR", err)
	}

	if !fishLocalStat.IsDir() {
		os.MkdirAll(fishLocalPath, 0755)
	}

	fishCompletionPath := filepath.Join(fishLocalPath, "dalennod.fish")
	if _, err := os.Stat(fishCompletionPath); !os.IsNotExist(err) {
		return
	}

	fishCompletionFile, err := os.Create(fishCompletionPath)
	if err != nil {
		log.Println("error creating fish completion file. ERROR:", err)
	}
	defer fishCompletionFile.Close()

	_, err = fishCompletionFile.Write([]byte(`# Autogenerated from dalennod program
# ~/.local/share/fish/generated_completions/dalennod.fish

complete -c dalennod -s a -l add -d "Add a bookmark entry to the database"
complete -c dalennod -s V -l view-all -d "View all bookmarks"
complete -c dalennod -s v -l view -r -d "View specific bookmark using its ID"
complete -c dalennod -s u -l update -r -d "Update specific bookmark using its ID"
complete -c dalennod -s r -l remove -r -d "Remove specific bookmark using its ID"
complete -c dalennod -s b -l backup -d "Start backup process"
complete -c dalennod -s s -l serve -d "Start webserver locally for Web UI & Extension"
complete -c dalennod -s h -l help -d "Shows help message"
complete -c dalennod -l json -d "Print entire DB in JSON. Use alongside -b, --backup flag"
complete -c dalennod -l where -d "Print config and logs directory path"

# import options
complete -c dalennod -s i -l import -d "Import bookmarks from a browser"
complete -c dalennod -l firefox -d "Import bookmarks from Firefox. Must use alongside -i, --import option"
complete -c dalennod -l chromium -d "Import bookmarks from Chromium. Must use alongside -i, --import option"
complete -c dalennod -l dalennod -d "Import bookmarks from exported Dalennod JSON. Must use alongside -i, --import option"
`))
	if err != nil {
		log.Println("error writing to fish completion file. ERROR:", err)
	}
}
